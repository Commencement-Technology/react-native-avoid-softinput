"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[179],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,f=p(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,m=s["".concat(l,".").concat(d)]||s[d]||c[d]||o;return n?r.createElement(m,i(i({ref:t},f),{},{components:n})):r.createElement(m,i({ref:t},f))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3869:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],p={id:"on-soft-input-applied-offset-change",title:"onSoftInputAppliedOffsetChange",sidebar_label:"onSoftInputAppliedOffsetChange"},l=void 0,u={unversionedId:"api/module/on-soft-input-applied-offset-change",id:"api/module/on-soft-input-applied-offset-change",title:"onSoftInputAppliedOffsetChange",description:"Use onSoftInputAppliedOffsetChange method, to e.g. create animation based on current applied offset value.",source:"@site/docs/api/module/ON_SOFT_INPUT_APPLIED_OFFSET_CHANGE.mdx",sourceDirName:"api/module",slug:"/api/module/on-soft-input-applied-offset-change",permalink:"/react-native-avoid-softinput/docs/api/module/on-soft-input-applied-offset-change",editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/docs/api/module/ON_SOFT_INPUT_APPLIED_OFFSET_CHANGE.mdx",tags:[],version:"current",frontMatter:{id:"on-soft-input-applied-offset-change",title:"onSoftInputAppliedOffsetChange",sidebar_label:"onSoftInputAppliedOffsetChange"},sidebar:"docsSidebar",previous:{title:"onSoftInputHidden",permalink:"/react-native-avoid-softinput/docs/api/module/on-soft-input-hidden"},next:{title:"setAdjustNothing",permalink:"/react-native-avoid-softinput/docs/api/module/set-adjust-nothing"}},f={},c=[{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3}],s={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"onSoftInputAppliedOffsetChange")," method, to e.g. create animation based on current applied offset value."),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"({ appliedOffset }: { appliedOffset: number }) => void"),(0,o.kt)("td",{parentName:"tr",align:null},"yes"),(0,o.kt)("td",{parentName:"tr",align:null},"function called during applying padding or translation with current applied value")))),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { AvoidSoftInput } from "react-native-avoid-softinput";\n\nconst unsubscribe = AvoidSoftInput.onSoftInputAppliedOffsetChange(\n  ({ appliedOffset }) => {\n    // Do sth\n  }\n);\n\n// Later invoke unsubscribe.remove()\n')))}d.isMDXComponent=!0}}]);