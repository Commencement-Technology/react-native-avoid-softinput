"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2020],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=i,v=d["".concat(l,".").concat(f)]||d[f]||p[f]||r;return n?o.createElement(v,a(a({ref:t},u),{},{components:n})):o.createElement(v,a({ref:t},u))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9815:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const r={id:"usage-view",title:"Usage - view",sidebar_label:"Usage - view",keywords:["react-native-avoid-softinput","view","usage"]},a=void 0,s={unversionedId:"guides/usage-view",id:"version-3.0.x/guides/usage-view",title:"Usage - view",description:"Depending on the navigation setup you have, check the navigation's library documentation for correct way to run some actions when the screen gains/loses focus.",source:"@site/versioned_docs/version-3.0.x/guides/USAGE_VIEW.mdx",sourceDirName:"guides",slug:"/guides/usage-view",permalink:"/react-native-avoid-softinput/docs/guides/usage-view",draft:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-3.0.x/guides/USAGE_VIEW.mdx",tags:[],version:"3.0.x",frontMatter:{id:"usage-view",title:"Usage - view",sidebar_label:"Usage - view",keywords:["react-native-avoid-softinput","view","usage"]},sidebar:"docsSidebar",previous:{title:"Usage - module",permalink:"/react-native-avoid-softinput/docs/guides/usage-module"},next:{title:"Jest mock usage",permalink:"/react-native-avoid-softinput/docs/guides/jest-mock-usage"}},l={},c=[],u={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Depending on the navigation setup you have, check the navigation's library documentation for correct way to run some actions when the screen gains/loses focus."),(0,i.kt)("p",null,"The following example assumes ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation")," is used as a navigation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport { Button, Modal, ScrollView, TextInput, View } from "react-native";\nimport { AvoidSoftInputView } from "react-native-avoid-softinput";\nimport { useFocusEffect } from "@react-navigation/native";\n\nexport const ModalExample: React.FC = () => {\n  const [ modalVisible, setModalVisible ] = React.useState(false);\n\n// highlight-start\n  const onFocusEffect = React.useCallback(() => {\n    // This should be run when screen gains focus - enable the module where it\'s needed\n    AvoidSoftInput.setShouldMimicIOSBehavior(true);\n    return () => {\n      // This should be run when screen loses focus - disable the module where it\'s not needed, to make a cleanup\n      AvoidSoftInput.setShouldMimicIOSBehavior(false);\n    };\n  }, []);\n\n  useFocusEffect(onFocusEffect); // register callback to focus events\n// highlight-end\n\n  function closeModal() {\n    setModalVisible(false);\n  }\n\n  function openModal() {\n    setModalVisible(true);\n  }\n\n  return <View>\n    <Button\n      onPress={openModal}\n      title="Open modal"\n    />\n    <Modal\n      onRequestClose={closeModal}\n      visible={modalVisible}\n    >\n      <View>\n        <View>\n          <View>\n            <Button onPress={closeModal} title="X" />\n          </View>\n// highlight-start\n          <AvoidSoftInputView>\n            <ScrollView>\n              <View>\n                <TextInput placeholder="Single line" />\n                <TextInput placeholder="Multiline" />\n                <Button\n                  onPress={closeModal}\n                  title="Submit"\n                />\n              </View>\n            </ScrollView>\n          </AvoidSoftInputView>\n// highlight-end\n        </View>\n      </View>\n    </Modal>\n  </View>;\n};\n')))}d.isMDXComponent=!0}}]);