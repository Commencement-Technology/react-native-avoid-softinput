"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5093],{4158:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>d,toc:()=>r});var i=t(4848),o=t(8453);const s={id:"recipes-animations",title:"Animations recipe",sidebar_label:"Animations",keywords:["react-native-avoid-softinput","animations","recipe"]},a=void 0,d={id:"recipes/recipes-animations",title:"Animations recipe",description:"Animations based on AvoidSoftInput module events",source:"@site/versioned_docs/version-4.0.x/recipes/ANIMATIONS.mdx",sourceDirName:"recipes",slug:"/recipes/recipes-animations",permalink:"/react-native-avoid-softinput/docs/4.0.x/recipes/recipes-animations",draft:!1,unlisted:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-4.0.x/recipes/ANIMATIONS.mdx",tags:[],version:"4.0.x",frontMatter:{id:"recipes-animations",title:"Animations recipe",sidebar_label:"Animations",keywords:["react-native-avoid-softinput","animations","recipe"]},sidebar:"docsSidebar",previous:{title:"Sticky footer",permalink:"/react-native-avoid-softinput/docs/4.0.x/recipes/recipes-sticky-footer"},next:{title:"Custom config",permalink:"/react-native-avoid-softinput/docs/4.0.x/recipes/recipes-custom-config"}},c={},r=[{value:"Animations based on AvoidSoftInput module events",id:"animations-based-on-avoidsoftinput-module-events",level:3},{value:"Animations based on AvoidSoftInputView callbacks",id:"animations-based-on-avoidsoftinputview-callbacks",level:3}];function u(n){const e={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h3,{id:"animations-based-on-avoidsoftinput-module-events",children:"Animations based on AvoidSoftInput module events"}),"\n",(0,i.jsxs)(e.p,{children:["You can use ",(0,i.jsx)(e.code,{children:"AvoidSoftInput.onSoftInputShown"}),", ",(0,i.jsx)(e.code,{children:"AvoidSoftInput.onSoftInputHidden"}),", ",(0,i.jsx)(e.code,{children:"AvoidSoftInput.onSoftInputHeightChange"})," and ",(0,i.jsx)(e.code,{children:"AvoidSoftInput.onSoftInputAppliedOffsetChange"})," methods to listen for soft input events."]}),"\n",(0,i.jsxs)(e.p,{children:["If you plan to use those methods in ",(0,i.jsx)(e.code,{children:"useEffect"}),", you can instead use shortcut hooks:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"useSoftInputShown"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"useSoftInputHidden"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"useSoftInputHeightChanged"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"useSoftInputAppliedOffsetChanged"})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"const useAnimatedValue = (initialValue: number) => {\n  const animatedValue = useRef<Animated.Value>(null);\n\n  if (animatedValue.current === null) {\n    animatedValue.current = new Animated.Value(initialValue);\n  }\n\n  return animatedValue.current;\n}\n\nexport const AnimationExample = () => {\n  /**\n   * You can make animations with React Native's Animated API or Reanimated library\n   */\n  const animatedValue = useAnimatedValue(0);\n\n  useSoftInputShown(({ softInputHeight }) => {\n    /**\n     * Animate based on event value\n     */\n    Animated.timing(animatedValue, {\n      toValue: softInputHeight,\n      duration: 1000,\n    }).start();\n  });\n\n  useSoftInputHidden(() => {\n    /**\n     * Animate based on event value\n     */\n    Animated.timing(animatedValue, {\n      toValue: 0,\n      duration: 1000,\n    }).start();\n  });\n\n  return (\n    <View>\n      // ... some JSX\n      <Animated.View /** apply animated style */>\n        // ... animated content\n      </Animated.View>\n      // ... some JSX\n    </View>\n  );\n};\n"})}),"\n",(0,i.jsx)(e.h3,{id:"animations-based-on-avoidsoftinputview-callbacks",children:"Animations based on AvoidSoftInputView callbacks"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"AvoidSoftInputView"})," receives events through ",(0,i.jsx)(e.code,{children:"onSoftInputShown"}),", ",(0,i.jsx)(e.code,{children:"onSoftInputHidden"}),", ",(0,i.jsx)(e.code,{children:"onSoftInputHeightChange"}),", ",(0,i.jsx)(e.code,{children:"onSoftInputAppliedOffsetChange"})," callbacks."]}),"\n",(0,i.jsxs)(e.p,{children:["Based on those callbacks, you can apply animations in similar way as when using ",(0,i.jsx)(e.code,{children:"useSoftInputShown"}),", ",(0,i.jsx)(e.code,{children:"useSoftInputHidden"}),", ",(0,i.jsx)(e.code,{children:"useSoftInputHeightChanged"})," and ",(0,i.jsx)(e.code,{children:"useSoftInputAppliedOffsetChanged"})," hooks."]}),"\n",(0,i.jsxs)(e.p,{children:["Additionally, when using Reanimated library from v2.3.0, you can create ",(0,i.jsx)(e.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/custom_events",children:"custom event handlers"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'export function useSoftInputAppliedOffsetHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      "worklet";\n      const { onSoftInputAppliedOffsetChange } = handlers;\n\n      if (\n        onSoftInputAppliedOffsetChange &&\n        event.eventName.endsWith("onSoftInputAppliedOffsetChange")\n      ) {\n        onSoftInputAppliedOffsetChange(event, context);\n      }\n    },\n    ["onSoftInputAppliedOffsetChange"],\n    doDependenciesDiffer\n  );\n}\n\nexport function useSoftInputHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      "worklet";\n      const { onSoftInputHidden, onSoftInputShown, onSoftInputHeightChange } =\n        handlers;\n\n      if (onSoftInputHidden && event.eventName.endsWith("onSoftInputHidden")) {\n        onSoftInputHidden(event, context);\n      }\n\n      if (onSoftInputShown && event.eventName.endsWith("onSoftInputShown")) {\n        onSoftInputShown(event, context);\n      }\n\n      if (\n        onSoftInputHeightChange &&\n        event.eventName.endsWith("onSoftInputHeightChange")\n      ) {\n        onSoftInputHeightChange(event, context);\n      }\n    },\n    ["onSoftInputHidden", "onSoftInputShown", "onSoftInputHeightChange"],\n    doDependenciesDiffer\n  );\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Check ",(0,i.jsx)(e.a,{href:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/packages/mobile",children:"example app"})," for a detailed usage example."]})]})}function l(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>d});var i=t(6540);const o={},s=i.createContext(o);function a(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);