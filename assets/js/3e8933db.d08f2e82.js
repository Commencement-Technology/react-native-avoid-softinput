"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4615],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,d=u["".concat(c,".").concat(m)]||u[m]||f[m]||r;return n?o.createElement(d,a(a({ref:t},l),{},{components:n})):o.createElement(d,a({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const r={id:"recipes-custom-config",title:"Custom config recipe",sidebar_label:"Custom config",keywords:["react-native-avoid-softinput","custom config","recipe"]},a=void 0,s={unversionedId:"recipes/recipes-custom-config",id:"version-3.0.x/recipes/recipes-custom-config",title:"Custom config recipe",description:"Applied offset animation can be configured both when using AvoidSoftInput module and AvoidSoftInputView component.",source:"@site/versioned_docs/version-3.0.x/recipes/CUSTOM_CONFIG.mdx",sourceDirName:"recipes",slug:"/recipes/recipes-custom-config",permalink:"/react-native-avoid-softinput/docs/3.0.x/recipes/recipes-custom-config",draft:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-3.0.x/recipes/CUSTOM_CONFIG.mdx",tags:[],version:"3.0.x",frontMatter:{id:"recipes-custom-config",title:"Custom config recipe",sidebar_label:"Custom config",keywords:["react-native-avoid-softinput","custom config","recipe"]},sidebar:"docsSidebar",previous:{title:"Animations",permalink:"/react-native-avoid-softinput/docs/3.0.x/recipes/recipes-animations"},next:{title:"setEnabled",permalink:"/react-native-avoid-softinput/docs/3.0.x/api/module/set-enabled"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Applied offset animation can be configured both when using ",(0,i.kt)("inlineCode",{parentName:"p"},"AvoidSoftInput")," module and ",(0,i.kt)("inlineCode",{parentName:"p"},"AvoidSoftInputView")," component."),(0,i.kt)("p",null,"To check how ",(0,i.kt)("inlineCode",{parentName:"p"},"AvoidSoftInput")," API can be customized, go to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/react-native-avoid-softinput/blob/main/packages/app/src/screens/CustomAnimationConfigModuleExample.tsx"},"CustomAnimationConfigModuleExample")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="packages/app/src/screens/CustomAnimationConfigModuleExample.tsx"',title:'"packages/app/src/screens/CustomAnimationConfigModuleExample.tsx"'},"import { useFocusEffect } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { AvoidSoftInput, useSoftInputState } from 'react-native-avoid-softinput';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport SingleInput from '../components/SingleInput';\n\nexport const CustomAnimationConfigModuleExample: React.FC = () => {\n  const onFocusEffect = React.useCallback(() => {\n    AvoidSoftInput.setShouldMimicIOSBehavior(true);\n    AvoidSoftInput.setEnabled(true);\n    AvoidSoftInput.setEasing('easeOut');\n    AvoidSoftInput.setHideAnimationDelay(1000);\n    AvoidSoftInput.setHideAnimationDuration(600);\n    AvoidSoftInput.setShowAnimationDelay(1000);\n    AvoidSoftInput.setShowAnimationDuration(1200);\n    return () => {\n      AvoidSoftInput.setEasing('linear');\n      AvoidSoftInput.setHideAnimationDelay();\n      AvoidSoftInput.setHideAnimationDuration();\n      AvoidSoftInput.setShowAnimationDelay();\n      AvoidSoftInput.setShowAnimationDuration();\n      AvoidSoftInput.setEnabled(false);\n      AvoidSoftInput.setShouldMimicIOSBehavior(false);\n    };\n  }, []);\n\n  useFocusEffect(onFocusEffect);\n\n  const softInputState = useSoftInputState();\n\n  return <SafeAreaView edges={[ 'left', 'bottom', 'right' ]} style={styles.container}>\n    <View style={styles.contentContainer}>\n      <SingleInput placeholder=\"1\" />\n      <View style={styles.spacer}>\n        <Text style={styles.label}>isVisible: {JSON.stringify(softInputState.isSoftInputShown)}</Text>\n        <Text style={styles.label}>height: {softInputState.softInputHeight}</Text>\n      </View>\n    </View>\n  </SafeAreaView>;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'stretch',\n    flex: 1,\n  },\n  contentContainer: {\n    alignSelf: 'stretch',\n    flexDirection: 'column-reverse',\n    flexGrow: 1,\n  },\n  label: {\n    color: 'blue',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  spacer: {\n    alignItems: 'center',\n    backgroundColor: 'pink',\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n")),(0,i.kt)("p",null,"To check how ",(0,i.kt)("inlineCode",{parentName:"p"},"AvoidSoftInputView")," props can be used, go to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/react-native-avoid-softinput/blob/main/packages/app/src/screens/CustomAnimationConfigViewExample.tsx"},"CustomAnimationConfigViewExample")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="packages/app/src/screens/CustomAnimationConfigViewExample.tsx"',title:'"packages/app/src/screens/CustomAnimationConfigViewExample.tsx"'},"import { useFocusEffect } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { AvoidSoftInput, AvoidSoftInputView } from 'react-native-avoid-softinput';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport SingleInput from '../components/SingleInput';\n\nexport const CustomAnimationConfigViewExample: React.FC = () => {\n  const onFocusEffect = React.useCallback(() => {\n    AvoidSoftInput.setShouldMimicIOSBehavior(true);\n    AvoidSoftInput.setEnabled(true);\n    return () => {\n      AvoidSoftInput.setEnabled(false);\n      AvoidSoftInput.setShouldMimicIOSBehavior(false);\n    };\n  }, []);\n\n  useFocusEffect(onFocusEffect);\n\n  return <SafeAreaView edges={[ 'left', 'bottom', 'right' ]} style={styles.container}>\n    <AvoidSoftInputView\n      easing=\"easeOut\"\n      hideAnimationDelay={1000}\n      hideAnimationDuration={600}\n      showAnimationDelay={1000}\n      showAnimationDuration={1200}\n      style={styles.contentContainer}>\n      <SingleInput placeholder=\"1\" />\n      <View style={styles.spacer}>\n        <Text style={styles.label}>SPACER</Text>\n      </View>\n    </AvoidSoftInputView>\n  </SafeAreaView>;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'stretch',\n    flex: 1,\n  },\n  contentContainer: {\n    alignSelf: 'stretch',\n    flexDirection: 'column-reverse',\n    flexGrow: 1,\n  },\n  label: {\n    color: 'blue',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  spacer: {\n    alignItems: 'center',\n    backgroundColor: 'pink',\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n")))}u.isMDXComponent=!0}}]);