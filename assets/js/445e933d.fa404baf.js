"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1684],{2361:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var n=r(4848),o=r(8453);const a={id:"alternatives",title:"Alternatives",sidebar_label:"Alternatives",keywords:["react-native-avoid-softinput","alternatives","react-native-keyboard-controller"]},i=void 0,s={id:"guides/alternatives",title:"Alternatives",description:"If, for whatever reason, the library does not satisfy your project's use case, you can check react-native-keyboard-controller",source:"@site/docs/guides/ALTERNATIVES.mdx",sourceDirName:"guides",slug:"/guides/alternatives",permalink:"/react-native-avoid-softinput/docs/next/guides/alternatives",draft:!1,unlisted:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/docs/guides/ALTERNATIVES.mdx",tags:[],version:"current",frontMatter:{id:"alternatives",title:"Alternatives",sidebar_label:"Alternatives",keywords:["react-native-avoid-softinput","alternatives","react-native-keyboard-controller"]},sidebar:"docsSidebar",previous:{title:"Jest mock usage",permalink:"/react-native-avoid-softinput/docs/next/guides/jest-mock-usage"},next:{title:"Form",permalink:"/react-native-avoid-softinput/docs/next/recipes/recipes-form"}},c={},d=[];function l(e){const t={a:"a",code:"code",p:"p",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["If, for whatever reason, the library does not satisfy your project's use case, you can check ",(0,n.jsx)(t.a,{href:"https://github.com/kirillzyusko/react-native-keyboard-controller",children:"react-native-keyboard-controller"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"react-native-keyboard-controller"})," has an interesting approach of detecting keyboard appearance on native side and letting you apply detected height to Reanimated or vanilla Animated views.\nIt's written in Kotlin and Swift, it uses WindowInsetsCompat API on Android and it also supports Fabric & TurboModules from ",(0,n.jsx)(t.a,{href:"https://kirillzyusko.github.io/react-native-keyboard-controller/blog/fabric",children:"version 1.2.0"}),".\nAdditionally, it has a interactive keyboard support from ",(0,n.jsx)(t.a,{href:"https://kirillzyusko.github.io/react-native-keyboard-controller/blog/interactive-keyboard",children:"version 1.5.0"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var n=r(6540);const o={},a=n.createContext(o);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);