"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9529],{9285:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(4848),i=t(8453);const s={id:"recipes-form",title:"Form recipe",sidebar_label:"Form",keywords:["react-native-avoid-softinput","form","recipe"]},r=void 0,a={id:"recipes/recipes-form",title:"Form recipe",description:"To handle fullscreen form, check the example form component",source:"@site/versioned_docs/version-4.0.x/recipes/FORM.mdx",sourceDirName:"recipes",slug:"/recipes/recipes-form",permalink:"/react-native-avoid-softinput/docs/4.0.x/recipes/recipes-form",draft:!1,unlisted:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-4.0.x/recipes/FORM.mdx",tags:[],version:"4.0.x",frontMatter:{id:"recipes-form",title:"Form recipe",sidebar_label:"Form",keywords:["react-native-avoid-softinput","form","recipe"]},sidebar:"docsSidebar",previous:{title:"Alternatives",permalink:"/react-native-avoid-softinput/docs/4.0.x/guides/alternatives"},next:{title:"Modal",permalink:"/react-native-avoid-softinput/docs/4.0.x/recipes/recipes-modal"}},c={},l=[];function p(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["To handle fullscreen form, check ",(0,o.jsx)(n.a,{href:"https://github.com/mateusz1913/react-native-avoid-softinput/blob/main/packages/app/src/screens/FormExample.tsx",children:"the example form component"})]}),"\n",(0,o.jsx)(n.p,{children:"This is the basic case, where all form elements are placed inside scrollable container.\nWhen the keyboard is visible, the only tasks are to push the input (if needed) above the keyboard and make the submit button visible, when scrolling to the bottom."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="packages/app/src/screens/FormExample.tsx"',children:"import { useFocusEffect } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, ScrollView, StyleSheet, View } from 'react-native';\nimport { AvoidSoftInput, useSoftInputAppliedOffsetChanged } from 'react-native-avoid-softinput';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport Button from '../components/Button';\nimport MultilineInput from '../components/MultilineInput';\nimport SingleInput from '../components/SingleInput';\nimport { styles as commonStyles } from '../consts/styles';\n\nconst icon = require('../../assets/AppIconTransparent.png');\n\nconst NOOP = () => {};\n\nexport const FormExample: React.FC = () => {\n  const onFocusEffect = React.useCallback(() => {\n    AvoidSoftInput.setShouldMimicIOSBehavior(true);\n    AvoidSoftInput.setEnabled(true);\n    return () => {\n      AvoidSoftInput.setEnabled(false);\n      AvoidSoftInput.setShouldMimicIOSBehavior(false);\n    };\n  }, []);\n\n  useFocusEffect(onFocusEffect);\n\n  useSoftInputAppliedOffsetChanged(({ appliedOffset }) => {\n    console.log({ appliedOffset });\n  });\n\n  return <SafeAreaView edges={[ 'bottom', 'left', 'right' ]} style={commonStyles.screenContainer}>\n    <ScrollView\n      bounces={false}\n      contentContainerStyle={commonStyles.scrollContainer}\n      contentInsetAdjustmentBehavior=\"always\"\n      overScrollMode=\"always\"\n      showsVerticalScrollIndicator={true}\n      style={commonStyles.stretch}>\n      <View style={styles.logoContainer}>\n        <Image\n          resizeMode=\"contain\"\n          source={icon}\n          style={styles.logo}\n        />\n      </View>\n      <View style={styles.formContainer}>\n        <SingleInput placeholder=\"Single line input\" />\n        <MultilineInput placeholder=\"Multiline input\" style={styles.secondInput} />\n        <MultilineInput placeholder=\"Large multiline input\" />\n      </View>\n      <View style={styles.submitButtonContainer}>\n        <Button\n          onPress={NOOP}\n          title=\"Submit\"\n        />\n      </View>\n    </ScrollView>\n  </SafeAreaView>;\n};\n\nconst styles = StyleSheet.create({\n  formContainer: {\n    alignItems: 'center',\n    alignSelf: 'stretch',\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  logo: {\n    height: 200,\n    width: 200,\n  },\n  logoContainer: {\n    alignItems: 'center',\n    alignSelf: 'stretch',\n    flex: 1,\n    justifyContent: 'center',\n    paddingVertical: 100,\n  },\n  secondInput: {\n    height: 200,\n  },\n  submitButtonContainer: {\n    alignItems: 'center',\n    alignSelf: 'stretch',\n    justifyContent: 'center',\n    marginTop: 100,\n  },\n});\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);