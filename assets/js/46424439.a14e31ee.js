"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8451],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=o.createContext({}),s=function(e){var t=o.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=n,h=p["".concat(d,".").concat(m)]||p[m]||c[m]||a;return r?o.createElement(h,i(i({ref:t},u),{},{components:r})):o.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3825:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const a={id:"set-should-mimic-ios-behavior",title:"setShouldMimicIOSBehavior",sidebar_label:"setShouldMimicIOSBehavior",keywords:["react-native-avoid-softinput","setShouldMimicIOSBehavior","module"]},i=void 0,l={unversionedId:"api/module/set-should-mimic-ios-behavior",id:"version-3.0.x/api/module/set-should-mimic-ios-behavior",title:"setShouldMimicIOSBehavior",description:"Use setShouldMimicIOSBehavior method, to determine whether keyboard on Android should be handled by the library (like on iOS) or should be managed by OS (via android:windowSoftInputMode param).",source:"@site/versioned_docs/version-3.0.x/api/module/SET_SHOULD_MIMIC_IOS_BEHAVIOR.mdx",sourceDirName:"api/module",slug:"/api/module/set-should-mimic-ios-behavior",permalink:"/react-native-avoid-softinput/docs/api/module/set-should-mimic-ios-behavior",draft:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-3.0.x/api/module/SET_SHOULD_MIMIC_IOS_BEHAVIOR.mdx",tags:[],version:"3.0.x",frontMatter:{id:"set-should-mimic-ios-behavior",title:"setShouldMimicIOSBehavior",sidebar_label:"setShouldMimicIOSBehavior",keywords:["react-native-avoid-softinput","setShouldMimicIOSBehavior","module"]},sidebar:"docsSidebar",previous:{title:"setEnabled",permalink:"/react-native-avoid-softinput/docs/api/module/set-enabled"},next:{title:"setAvoidOffset",permalink:"/react-native-avoid-softinput/docs/api/module/set-avoid-offset"}},d={},s=[{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3}],u={toc:s};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"setShouldMimicIOSBehavior")," method, to determine whether keyboard on Android should be handled by the library (like on iOS) or should be managed by OS (via ",(0,n.kt)("inlineCode",{parentName:"p"},"android:windowSoftInputMode")," param)."),(0,n.kt)("h3",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Required"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"yes"),(0,n.kt)("td",{parentName:"tr",align:null},"should library handle keyboard handling on Android")))),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { AvoidSoftInput } from "react-native-avoid-softinput";\n\nAvoidSoftInput.setShouldMimicIOSBehavior(true);\n')))}p.isMDXComponent=!0}}]);