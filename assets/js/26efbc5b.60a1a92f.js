"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4134],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={id:"recipes-form",title:"Form recipe",sidebar_label:"Form"},i=void 0,l={unversionedId:"recipes/recipes-form",id:"recipes/recipes-form",title:"Form recipe",description:"To handle fullscreen form, just follow steps from module usage section",source:"@site/docs/recipes/FORM.mdx",sourceDirName:"recipes",slug:"/recipes/recipes-form",permalink:"/react-native-avoid-softinput/docs/next/recipes/recipes-form",draft:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/docs/recipes/FORM.mdx",tags:[],version:"current",frontMatter:{id:"recipes-form",title:"Form recipe",sidebar_label:"Form"},sidebar:"docsSidebar",previous:{title:"Alternatives",permalink:"/react-native-avoid-softinput/docs/next/guides/alternatives"},next:{title:"Modal",permalink:"/react-native-avoid-softinput/docs/next/recipes/recipes-modal"}},c={},s=[{value:"Example",id:"example",level:3}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To handle fullscreen form, just follow steps from ",(0,o.kt)("a",{parentName:"p",href:"../guides/usage-module"},"module usage")," section"),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'export const FormExample: React.FC = () => {\n  /**\n   * If you use react-navigation and want to enable module only in specific screen,\n   * you can call it in react-navigation `useFocusEffect` callback\n   *\n   * If you want to have module always enabled,\n   * just call it inside `useEffect` in your root component\n   *\n   * ```\n   * useEffect(() => {\n   *   AvoidSoftInput.setShouldMimicIOSBehavior(true); // <---- Tell Android that library will handle keyboard insets manually to match iOS behavior\n   *   AvoidSoftInput.setEnabled(true); // <---- Enable module\n   * }, [])\n   * ```\n   */\n  const onFocusEffect = useCallback(() => {\n    AvoidSoftInput.setShouldMimicIOSBehavior(true); // <---- Tell Android that library will handle keyboard insets manually to match iOS behavior\n    AvoidSoftInput.setEnabled(true); // <---- Enable module\n    return () => {\n      AvoidSoftInput.setEnabled(false);\n      AvoidSoftInput.setShouldMimicIOSBehavior(false);\n    };\n  }, []);\n\n  useFocusEffect(onFocusEffect);\n\n  /** Sample form */\n  return (\n    <SafeAreaView>\n      <ScrollView>\n        <View>\n          <Image />\n        </View>\n        <View>\n          <TextInput placeholder="Single line input" />\n          <TextInput placeholder="Multiline input" />\n          <TextInput placeholder="Large multiline input" />\n        </View>\n        <View>\n          <Button />\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n')))}p.isMDXComponent=!0}}]);