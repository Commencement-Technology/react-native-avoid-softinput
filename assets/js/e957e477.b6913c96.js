"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3588],{155:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(4848),i=t(8453);const s={id:"recipes-form",title:"Form recipe",sidebar_label:"Form"},r=void 0,a={id:"recipes/recipes-form",title:"Form recipe",description:"To handle fullscreen form, just follow steps from module usage section",source:"@site/versioned_docs/version-2.0.x/recipes/FORM.mdx",sourceDirName:"recipes",slug:"/recipes/recipes-form",permalink:"/react-native-avoid-softinput/docs/2.0.x/recipes/recipes-form",draft:!1,unlisted:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-2.0.x/recipes/FORM.mdx",tags:[],version:"2.0.x",frontMatter:{id:"recipes-form",title:"Form recipe",sidebar_label:"Form"},sidebar:"docsSidebar",previous:{title:"Usage - view",permalink:"/react-native-avoid-softinput/docs/2.0.x/guides/usage-view"},next:{title:"Modal",permalink:"/react-native-avoid-softinput/docs/2.0.x/recipes/recipes-modal"}},c={},l=[{value:"Example",id:"example",level:3}];function u(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["To handle fullscreen form, just follow steps from ",(0,o.jsx)(n.a,{href:"../guides/usage-module",children:"module usage"})," section"]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'export const FormExample: React.FC = () => {\n  /**\n   * If you use react-navigation and want to enable module only in specific screen,\n   * you can call it in react-navigation `useFocusEffect` callback\n   *\n   * If you want to have module always enabled,\n   * just call it inside `useEffect` in your root component\n   *\n   * ```\n   * useEffect(() => {\n   *   AvoidSoftInput.setAdjustNothing(); // <---- Set windowSoftInputMode on Android to match iOS behavior\n   *   AvoidSoftInput.setEnabled(true); // <---- Enable module\n   * }, [])\n   * ```\n   */\n  const onFocusEffect = useCallback(() => {\n    AvoidSoftInput.setAdjustNothing(); // <---- Set windowSoftInputMode on Android to match iOS behavior\n    AvoidSoftInput.setEnabled(true); // <---- Enable module\n    return () => {\n      AvoidSoftInput.setEnabled(false);\n      AvoidSoftInput.setDefaultAppSoftInputMode();\n    };\n  }, []);\n\n  useFocusEffect(onFocusEffect);\n\n  /** Sample form */\n  return (\n    <SafeAreaView>\n      <ScrollView>\n        <View>\n          <Image />\n        </View>\n        <View>\n          <TextInput placeholder="Single line input" />\n          <TextInput placeholder="Multiline input" />\n          <TextInput placeholder="Large multiline input" />\n        </View>\n        <View>\n          <Button />\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);