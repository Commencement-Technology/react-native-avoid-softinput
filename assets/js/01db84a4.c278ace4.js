"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3547],{3772:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=i(4848),n=i(8453);const a={id:"migration_to_3_0_x",title:"Migration to 3.0.x",sidebar_label:"Migration to 3.0.x",keywords:["react-native-avoid-softinput","migration"]},s=void 0,r={id:"guides/migration_to_3_0_x",title:"Migration to 3.0.x",description:"WindowInsetsCompat API (BREAKING CHANGE)",source:"@site/versioned_docs/version-3.0.x/guides/MIGRATION_TO_3_0_x.mdx",sourceDirName:"guides",slug:"/guides/migration_to_3_0_x",permalink:"/react-native-avoid-softinput/docs/3.0.x/guides/migration_to_3_0_x",draft:!1,unlisted:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-3.0.x/guides/MIGRATION_TO_3_0_x.mdx",tags:[],version:"3.0.x",frontMatter:{id:"migration_to_3_0_x",title:"Migration to 3.0.x",sidebar_label:"Migration to 3.0.x",keywords:["react-native-avoid-softinput","migration"]},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/react-native-avoid-softinput/docs/3.0.x/guides"},next:{title:"Usage - module",permalink:"/react-native-avoid-softinput/docs/3.0.x/guides/usage-module"}},d={},l=[{value:"WindowInsetsCompat API (BREAKING CHANGE)",id:"windowinsetscompat-api-breaking-change",level:2},{value:"Example",id:"example",level:4},{value:"Support for Fabric &amp; TurboModules",id:"support-for-fabric--turbomodules",level:2},{value:"Bumping minimal supported React Native and iOS versions (BREAKING CHANGE)",id:"bumping-minimal-supported-react-native-and-ios-versions-breaking-change",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"windowinsetscompat-api-breaking-change",children:"WindowInsetsCompat API (BREAKING CHANGE)"}),"\n",(0,o.jsxs)(t.p,{children:["With version 3.0.x Android implementation starts using ",(0,o.jsx)(t.a,{href:"https://developer.android.com/reference/androidx/core/view/WindowInsetsCompat",children:"WindowInsetsCompat"})," API. This made library's Android implementation more predictible and less hacky."]}),"\n",(0,o.jsxs)(t.p,{children:["As a consequence with version 3.0.x library to handle padding/translation on Android needs to call new method ",(0,o.jsx)(t.code,{children:"setShouldMimicIOSBehavior"})," instead of ",(0,o.jsx)(t.code,{children:"setAdjustNothing"})]}),"\n",(0,o.jsxs)(t.p,{children:["If you upgrade to version 3.0.x (and you don't use ",(0,o.jsx)(t.code,{children:"setAdjustNothing"})," or ",(0,o.jsx)(t.code,{children:"setDefaultAppSoftInputMode"})," intentionally to handle sth else then library's correct usage on Android), just replace all ",(0,o.jsx)(t.code,{children:"setAdjustNothing"})," (and ",(0,o.jsx)(t.code,{children:"setDefaultAppSoftInputMode"}),") calls with ",(0,o.jsx)(t.code,{children:"setShouldMimicIOSBehavior(<boolean-value>)"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-diff",children:"  /**\n   * If module in your app is always enabled,\n   * just change `setAdjustNothing` with `setShouldMimicIOSBehavior(true)`\n   */\n  useEffect(() => {\n-    AvoidSoftInput.setAdjustNothing(); // <---- Set windowSoftInputMode on Android to match iOS behavior\n+    AvoidSoftInput.setShouldMimicIOSBehavior(true); // <---- Tell Android that library will handle keyboard insets manually to match iOS behavior\n    AvoidSoftInput.setEnabled(true); // <---- Enable module\n  }, []);\n\n  /**\n   * If you used module only in specific screen with react-navigation,\n   * change `setAdjustNothing` with `setShouldMimicIOSBehavior(true)`\n   * and replace `setDefaultAppSoftInputMode` with `setShouldMimicIOSBehavior(false)`\n   */\n  const onFocusEffect = useCallback(() => {\n-    AvoidSoftInput.setAdjustNothing(); // <---- Set windowSoftInputMode on Android to match iOS behavior\n+    AvoidSoftInput.setShouldMimicIOSBehavior(true); // <---- Tell Android that library will handle keyboard insets manually to match iOS behavior\n    AvoidSoftInput.setEnabled(true); // <---- Enable module\n    return () => {\n      AvoidSoftInput.setEnabled(false);\n-      AvoidSoftInput.setDefaultAppSoftInputMode();\n+      AvoidSoftInput.setShouldMimicIOSBehavior(false);\n    };\n  }, []);\n\n  useFocusEffect(onFocusEffect);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"support-for-fabric--turbomodules",children:"Support for Fabric & TurboModules"}),"\n",(0,o.jsxs)(t.p,{children:["From version 3.0.x library supports RN's new architecture in projects with RN version >= 0.70. Autolinking of Fabric & TurboModule library version is handled automatically with projects using ",(0,o.jsx)(t.code,{children:"@react-native-community/cli"})," version >= 9.0.0 (",(0,o.jsx)(t.a,{href:"https://github.com/react-native-community/cli/commit/86df104250608977130378b9b59d8a9e12d0212a",children:"support was implemented with this commit"}),")"]}),"\n",(0,o.jsx)(t.h2,{id:"bumping-minimal-supported-react-native-and-ios-versions-breaking-change",children:"Bumping minimal supported React Native and iOS versions (BREAKING CHANGE)"}),"\n",(0,o.jsx)(t.p,{children:"As a result of introducing support for Fabric & TurboModules library bumped its minimal supported RN version (on old architecture) to 0.65 and minimal supported iOS version to 11.0."}),"\n",(0,o.jsx)(t.p,{children:"If you use library on older project (RN version <= 0.64), you have to upgrade RN to version >= 0.65 or you can stay at 2.x.x, however be aware that it won't be developed (only critical bugs will be handled)."})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>r});var o=i(6540);const n={},a=o.createContext(n);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);