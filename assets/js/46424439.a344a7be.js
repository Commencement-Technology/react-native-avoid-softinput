"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8451],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),u=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,f=p["".concat(d,".").concat(m)]||p[m]||c[m]||i;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},3825:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return a},default:function(){return c},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var n=r(3117),o=(r(7294),r(3905));const i={id:"set-should-mimic-ios-behavior",title:"setShouldMimicIOSBehavior",sidebar_label:"setShouldMimicIOSBehavior"},a=void 0,l={unversionedId:"api/module/set-should-mimic-ios-behavior",id:"version-3.0.x/api/module/set-should-mimic-ios-behavior",title:"setShouldMimicIOSBehavior",description:"Use setShouldMimicIOSBehavior method, to determine whether keyboard on Android should be handled by the library (like on iOS) or should be managed by OS (via android:windowSoftInputMode param).",source:"@site/versioned_docs/version-3.0.x/api/module/SET_SHOULD_MIMIC_IOS_BEHAVIOR.mdx",sourceDirName:"api/module",slug:"/api/module/set-should-mimic-ios-behavior",permalink:"/react-native-avoid-softinput/docs/api/module/set-should-mimic-ios-behavior",draft:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-3.0.x/api/module/SET_SHOULD_MIMIC_IOS_BEHAVIOR.mdx",tags:[],version:"3.0.x",frontMatter:{id:"set-should-mimic-ios-behavior",title:"setShouldMimicIOSBehavior",sidebar_label:"setShouldMimicIOSBehavior"},sidebar:"docsSidebar",previous:{title:"setEnabled",permalink:"/react-native-avoid-softinput/docs/api/module/set-enabled"},next:{title:"setAvoidOffset",permalink:"/react-native-avoid-softinput/docs/api/module/set-avoid-offset"}},d={},u=[{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3}],s={toc:u};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"setShouldMimicIOSBehavior")," method, to determine whether keyboard on Android should be handled by the library (like on iOS) or should be managed by OS (via ",(0,o.kt)("inlineCode",{parentName:"p"},"android:windowSoftInputMode")," param)."),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"yes"),(0,o.kt)("td",{parentName:"tr",align:null},"should library handle keyboard handling on Android")))),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { AvoidSoftInput } from "react-native-avoid-softinput";\n\nAvoidSoftInput.setShouldMimicIOSBehavior(true);\n')))}c.isMDXComponent=!0}}]);