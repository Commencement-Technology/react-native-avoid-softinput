"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1688],{3540:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var o=t(4848),i=t(8453);const s={id:"usage-view",title:"Usage - view",sidebar_label:"Usage - view"},a=void 0,u={id:"guides/usage-view",title:"Usage - view",description:"",source:"@site/versioned_docs/version-2.0.x/guides/USAGE_VIEW.mdx",sourceDirName:"guides",slug:"/guides/usage-view",permalink:"/react-native-avoid-softinput/docs/2.0.x/guides/usage-view",draft:!1,unlisted:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-2.0.x/guides/USAGE_VIEW.mdx",tags:[],version:"2.0.x",frontMatter:{id:"usage-view",title:"Usage - view",sidebar_label:"Usage - view"},sidebar:"docsSidebar",previous:{title:"Usage - module",permalink:"/react-native-avoid-softinput/docs/2.0.x/guides/usage-module"},next:{title:"Form",permalink:"/react-native-avoid-softinput/docs/2.0.x/recipes/recipes-form"}},r={},d=[];function c(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:'import * as React from "react";\nimport { AvoidSoftInputView } from "react-native-avoid-softinput";\n\n/**\n * If you want to use `AvoidSoftInputView` on Android,\n * remember to call `setAdjustNothing()` somewhere in the root component\n * or inside `useFocusEffect` callback, if you use react-navigation and want to use\n * `AvoidSoftInputView` only on specific screen\n * \n * ```ts\n * React.useEffect(() => {\n *   AvoidSoftInput.setAdjustNothing();\n * }, []);\n * ```\n */\n\nconst MyComponent = () => {\n  function onSoftInputShown(e) {\n    // Do sth\n  }\n  function onSoftInputHidden() {\n    // Do sth\n  }\n  function onSoftInputHeightChange(e) {\n    // Do sth\n  }\n  function onSoftInputAppliedOffsetChange(e) {\n    // Do sth\n  }\n  return (\n    <AvoidSoftInputView\n      avoidOffset={10}\n      easing="easeIn"\n      hideAnimationDelay={100}\n      hideAnimationDuration={300}\n      onSoftInputShown={onSoftInputShown}\n      onSoftInputHidden={onSoftInputHidden}\n      onSoftInputHeightChange={onSoftInputHeightChange}\n      showAnimationDelay={100}\n      showAnimationDuration={800}\n      style={styles.avoidSoftInputView}\n    >\n      {/** Content that should be pushed above the keyboard */}\n    </AvoidSoftInputView>\n  );\n};\n'})})}function f(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>u});var o=t(6540);const i={},s=o.createContext(i);function a(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);