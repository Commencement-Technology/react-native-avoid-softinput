"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4481],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),v=n,f=u["".concat(l,".").concat(v)]||u[v]||p[v]||o;return r?a.createElement(f,i(i({ref:t},d),{},{components:r})):a.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=v;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}v.displayName="MDXCreateElement"},2164:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={id:"alternatives",title:"Alternatives",sidebar_label:"Alternatives"},i=void 0,s={unversionedId:"guides/alternatives",id:"guides/alternatives",title:"Alternatives",description:"If, for whatever reason, the library does not satisfy your project's use case, you can check following alternatives (all of them are great and much better than KeyboardAvoidingView):",source:"@site/docs/guides/ALTERNATIVES.mdx",sourceDirName:"guides",slug:"/guides/alternatives",permalink:"/react-native-avoid-softinput/docs/next/guides/alternatives",draft:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/docs/guides/ALTERNATIVES.mdx",tags:[],version:"current",frontMatter:{id:"alternatives",title:"Alternatives",sidebar_label:"Alternatives"},sidebar:"docsSidebar",previous:{title:"Jest mock usage",permalink:"/react-native-avoid-softinput/docs/next/guides/jest-mock-usage"},next:{title:"Form",permalink:"/react-native-avoid-softinput/docs/next/recipes/recipes-form"}},l={},c=[{value:"react-native-keyboard-manager + <code>android:windowSoftInputMode=&quot;adjustResize&quot;</code>",id:"react-native-keyboard-manager--androidwindowsoftinputmodeadjustresize",level:2},{value:"react-native-keyboard-controller",id:"react-native-keyboard-controller",level:2},{value:"react-native-keyboard-aware-scroll-view",id:"react-native-keyboard-aware-scroll-view",level:2}],d={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"If, for whatever reason, the library does not satisfy your project's use case, you can check following alternatives (all of them are great and much better than KeyboardAvoidingView):"),(0,n.kt)("h2",{id:"react-native-keyboard-manager--androidwindowsoftinputmodeadjustresize"},(0,n.kt)("a",{parentName:"h2",href:"https://github.com/douglasjunior/react-native-keyboard-manager"},"react-native-keyboard-manager")," + ",(0,n.kt)("inlineCode",{parentName:"h2"},'android:windowSoftInputMode="adjustResize"')),(0,n.kt)("p",null,"On iOS, you can use react-native-keyboard-manager which under the hood uses well-known ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/hackiftekhar/IQKeyboardManager"},"IQKeyboardManager"),". And for the Android, you might try default ",(0,n.kt)("inlineCode",{parentName:"p"},"adjustResize")," behavior."),(0,n.kt)("h2",{id:"react-native-keyboard-controller"},(0,n.kt)("a",{parentName:"h2",href:"https://github.com/kirillzyusko/react-native-keyboard-controller"},"react-native-keyboard-controller")),(0,n.kt)("p",null,"react-native-keyboard-controller has an interesting approach of detecting keyboard appearance on native side and letting you apply detected height to Reanimated or vanilla Animated views. It's written in Kotlin and Swift, it uses WindowInsetsCompat API on Android and it also supports Fabric & TurboModules from version 1.2.0."),(0,n.kt)("h2",{id:"react-native-keyboard-aware-scroll-view"},(0,n.kt)("a",{parentName:"h2",href:"https://github.com/APSL/react-native-keyboard-aware-scroll-view"},"react-native-keyboard-aware-scroll-view")),(0,n.kt)("p",null,"react-native-keyboard-aware-scroll-view can be used as a drop-in replacement for scroll containers that need to be keyboard aware. It has fully JS implementation, so it can be used in Expo Go apps."))}u.isMDXComponent=!0}}]);