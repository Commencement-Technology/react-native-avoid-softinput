"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8633],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),u=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(p.Provider,{value:n},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=u(t),f=a,m=l["".concat(p,".").concat(f)]||l[f]||c[f]||o;return t?i.createElement(m,r(r({ref:n},d),{},{components:t})):i.createElement(m,r({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=f;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[l]="string"==typeof e?e:a,r[1]=s;for(var u=2;u<o;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9174:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var i=t(7462),a=(t(7294),t(3905));const o={id:"recipes-animations",title:"Animations recipe",sidebar_label:"Animations",keywords:["react-native-avoid-softinput","animations","recipe"]},r=void 0,s={unversionedId:"recipes/recipes-animations",id:"version-3.0.x/recipes/recipes-animations",title:"Animations recipe",description:"Animations based on AvoidSoftInput module events",source:"@site/versioned_docs/version-3.0.x/recipes/ANIMATIONS.mdx",sourceDirName:"recipes",slug:"/recipes/recipes-animations",permalink:"/react-native-avoid-softinput/docs/recipes/recipes-animations",draft:!1,editUrl:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/docs/versioned_docs/version-3.0.x/recipes/ANIMATIONS.mdx",tags:[],version:"3.0.x",frontMatter:{id:"recipes-animations",title:"Animations recipe",sidebar_label:"Animations",keywords:["react-native-avoid-softinput","animations","recipe"]},sidebar:"docsSidebar",previous:{title:"Sticky footer",permalink:"/react-native-avoid-softinput/docs/recipes/recipes-sticky-footer"},next:{title:"Custom config",permalink:"/react-native-avoid-softinput/docs/recipes/recipes-custom-config"}},p={},u=[{value:"Animations based on AvoidSoftInput module events",id:"animations-based-on-avoidsoftinput-module-events",level:3},{value:"Animations based on AvoidSoftInputView callbacks",id:"animations-based-on-avoidsoftinputview-callbacks",level:3}],d={toc:u};function l(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"animations-based-on-avoidsoftinput-module-events"},"Animations based on AvoidSoftInput module events"),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"AvoidSoftInput.onSoftInputShown"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"AvoidSoftInput.onSoftInputHidden"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"AvoidSoftInput.onSoftInputHeightChange")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AvoidSoftInput.onSoftInputAppliedOffsetChange")," methods to listen for soft input events."),(0,a.kt)("p",null,"If you plan to use those methods in ",(0,a.kt)("inlineCode",{parentName:"p"},"useEffect"),", you can instead use shortcut hooks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useSoftInputShown")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useSoftInputHidden")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useSoftInputHeightChanged")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useSoftInputAppliedOffsetChanged"))),(0,a.kt)("p",null,"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const useAnimatedValue = (initialValue: number) => {\n  const animatedValue = useRef<Animated.Value>(null);\n\n  if (animatedValue.current === null) {\n    animatedValue.current = new Animated.Value(initialValue);\n  }\n\n  return animatedValue.current;\n}\n\nexport const AnimationExample = () => {\n  /**\n   * You can make animations with React Native's Animated API or Reanimated library\n   */\n  const animatedValue = useAnimatedValue(0);\n\n  useSoftInputShown(({ softInputHeight }) => {\n    /**\n     * Animate based on event value\n     */\n    Animated.timing(animatedValue, {\n      toValue: softInputHeight,\n      duration: 1000,\n    }).start();\n  });\n\n  useSoftInputHidden(() => {\n    /**\n     * Animate based on event value\n     */\n    Animated.timing(animatedValue, {\n      toValue: 0,\n      duration: 1000,\n    }).start();\n  });\n\n  return (\n    <View>\n      // ... some JSX\n      <Animated.View /** apply animated style */>\n        // ... animated content\n      </Animated.View>\n      // ... some JSX\n    </View>\n  );\n};\n")),(0,a.kt)("h3",{id:"animations-based-on-avoidsoftinputview-callbacks"},"Animations based on AvoidSoftInputView callbacks"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AvoidSoftInputView")," receives events through ",(0,a.kt)("inlineCode",{parentName:"p"},"onSoftInputShown"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"onSoftInputHidden"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"onSoftInputHeightChange"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"onSoftInputAppliedOffsetChange")," callbacks."),(0,a.kt)("p",null,"Based on those callbacks, you can apply animations in similar way as when using ",(0,a.kt)("inlineCode",{parentName:"p"},"useSoftInputShown"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useSoftInputHidden"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useSoftInputHeightChanged")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"useSoftInputAppliedOffsetChanged")," hooks."),(0,a.kt)("p",null,"Additionally, when using Reanimated library from v2.3.0, you can create ",(0,a.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/custom_events"},"custom event handlers")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'export function useSoftInputAppliedOffsetHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      "worklet";\n      const { onSoftInputAppliedOffsetChange } = handlers;\n\n      if (\n        onSoftInputAppliedOffsetChange &&\n        event.eventName.endsWith("onSoftInputAppliedOffsetChange")\n      ) {\n        onSoftInputAppliedOffsetChange(event, context);\n      }\n    },\n    ["onSoftInputAppliedOffsetChange"],\n    doDependenciesDiffer\n  );\n}\n\nexport function useSoftInputHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n\n  return useEvent(\n    (event) => {\n      "worklet";\n      const { onSoftInputHidden, onSoftInputShown, onSoftInputHeightChange } =\n        handlers;\n\n      if (onSoftInputHidden && event.eventName.endsWith("onSoftInputHidden")) {\n        onSoftInputHidden(event, context);\n      }\n\n      if (onSoftInputShown && event.eventName.endsWith("onSoftInputShown")) {\n        onSoftInputShown(event, context);\n      }\n\n      if (\n        onSoftInputHeightChange &&\n        event.eventName.endsWith("onSoftInputHeightChange")\n      ) {\n        onSoftInputHeightChange(event, context);\n      }\n    },\n    ["onSoftInputHidden", "onSoftInputShown", "onSoftInputHeightChange"],\n    doDependenciesDiffer\n  );\n}\n')),(0,a.kt)("p",null,"Check ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mateusz1913/react-native-avoid-softinput/tree/main/packages/mobile"},"example app")," for a detailed usage example."))}l.isMDXComponent=!0}}]);